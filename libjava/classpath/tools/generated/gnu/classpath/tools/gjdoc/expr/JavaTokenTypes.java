// $ANTLR 2.7.7 (20080530): "java-expression.g" -> "JavaLexer.java"$

   package gnu.classpath.tools.gjdoc.expr;

public interface JavaTokenTypes {
        int EOF = 1;
        int NULL_TREE_LOOKAHEAD = 3;
        int BLOCK = 4;
        int MODIFIERS = 5;
        int OBJBLOCK = 6;
        int SLIST = 7;
        int CTOR_DEF = 8;
        int METHOD_DEF = 9;
        int VARIABLE_DEF = 10;
        int INSTANCE_INIT = 11;
        int STATIC_INIT = 12;
        int TYPE = 13;
        int CLASS_DEF = 14;
        int INTERFACE_DEF = 15;
        int PACKAGE_DEF = 16;
        int ARRAY_DECLARATOR = 17;
        int EXTENDS_CLAUSE = 18;
        int IMPLEMENTS_CLAUSE = 19;
        int PARAMETERS = 20;
        int PARAMETER_DEF = 21;
        int LABELED_STAT = 22;
        int TYPECAST = 23;
        int INDEX_OP = 24;
        int POST_INC = 25;
        int POST_DEC = 26;
        int METHOD_CALL = 27;
        int EXPR = 28;
        int ARRAY_INIT = 29;
        int IMPORT = 30;
        int UNARY_MINUS = 31;
        int UNARY_PLUS = 32;
        int CASE_GROUP = 33;
        int ELIST = 34;
        int FOR_INIT = 35;
        int FOR_CONDITION = 36;
        int FOR_ITERATOR = 37;
        int EMPTY_STAT = 38;
        int FINAL = 39;
        int ABSTRACT = 40;
        int STRICTFP = 41;
        int SUPER_CTOR_CALL = 42;
        int CTOR_CALL = 43;
        int LBRACK = 44;
        int RBRACK = 45;
        int LITERAL_void = 46;
        int LITERAL_boolean = 47;
        int LITERAL_byte = 48;
        int LITERAL_char = 49;
        int LITERAL_short = 50;
        int LITERAL_int = 51;
        int LITERAL_float = 52;
        int LITERAL_long = 53;
        int LITERAL_double = 54;
        int LITERAL_String = 55;
        int IDENT = 56;
        int DOT = 57;
        int QUESTION = 58;
        int COLON = 59;
        int LOR = 60;
        int LAND = 61;
        int BOR = 62;
        int BXOR = 63;
        int BAND = 64;
        int NOT_EQUAL = 65;
        int EQUAL = 66;
        int LT = 67;
        int GT = 68;
        int LE = 69;
        int GE = 70;
        int SL = 71;
        int SR = 72;
        int BSR = 73;
        int PLUS = 74;
        int MINUS = 75;
        int STAR = 76;
        int DIV = 77;
        int MOD = 78;
        int BNOT = 79;
        int LNOT = 80;
        int LPAREN = 81;
        int RPAREN = 82;
        int LITERAL_true = 83;
        int LITERAL_false = 84;
        int LITERAL_null = 85;
        int NUM_INT = 86;
        int CHAR_LITERAL = 87;
        int STRING_LITERAL = 88;
        int NUM_FLOAT = 89;
        int NUM_LONG = 90;
        int NUM_DOUBLE = 91;
        int LCURLY = 92;
        int RCURLY = 93;
        int COMMA = 94;
        int ASSIGN = 95;
        int DIV_ASSIGN = 96;
        int PLUS_ASSIGN = 97;
        int INC = 98;
        int MINUS_ASSIGN = 99;
        int DEC = 100;
        int STAR_ASSIGN = 101;
        int MOD_ASSIGN = 102;
        int SR_ASSIGN = 103;
        int BSR_ASSIGN = 104;
        int SL_ASSIGN = 105;
        int BXOR_ASSIGN = 106;
        int BOR_ASSIGN = 107;
        int BAND_ASSIGN = 108;
        int SEMI = 109;
        int WS = 110;
        int SL_COMMIT = 111;
        int ML_COMMENT = 112;
        int ESC = 113;
        int HEX_DIGIT = 114;
        int VOCAB = 115;
        int EXPONENT = 116;
        int FLOAT_SUFFIX = 117;
}
