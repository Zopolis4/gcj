
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_imageio_png_PNGDecoder__
#define __gnu_javax_imageio_png_PNGDecoder__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace imageio
      {
        namespace png
        {
            class PNGData;
            class PNGDecoder;
            class PNGHeader;
        }
      }
    }
  }
  namespace java
  {
    namespace awt
    {
      namespace color
      {
          class ColorSpace;
      }
      namespace image
      {
          class ColorModel;
          class DataBuffer;
          class IndexColorModel;
          class WritableRaster;
      }
    }
  }
}

class gnu::javax::imageio::png::PNGDecoder : public ::java::lang::Object
{

public:
  PNGDecoder(::gnu::javax::imageio::png::PNGHeader *);
private:
  jint getBytes(JArray< jbyte > *, jint);
public:
  virtual void addData(::gnu::javax::imageio::png::PNGData *);
  virtual ::java::awt::image::WritableRaster * getRaster(::gnu::javax::imageio::png::PNGHeader *);
private:
  ::java::awt::image::DataBuffer * getShortBuffer();
  ::java::awt::image::DataBuffer * getByteBuffer();
public:
  virtual ::java::awt::image::ColorModel * getColorModel(::java::awt::color::ColorSpace *, jint, jint);
private:
  ::java::awt::image::IndexColorModel * grayPalette(jint);
public:
  virtual JArray< jbyte > * getRaster();
  virtual jboolean isFinished();
private:
  ::gnu::javax::imageio::png::PNGHeader * __attribute__((aligned(__alignof__( ::java::lang::Object)))) header;
  JArray< jbyte > * raster;
  JArray< jbyte > * scanline;
  JArray< jbyte > * lastScanline;
  JArray< jbyte > * filterType;
  jint offset;
  jint length;
  jint currentScanline;
  jint stride;
  ::java::util::zip::Inflater * inflater;
  jboolean readFilter;
  jint bpp;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_imageio_png_PNGDecoder__
