
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_imageio_bmp_BMPInfoHeader__
#define __gnu_javax_imageio_bmp_BMPInfoHeader__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace imageio
      {
        namespace bmp
        {
            class BMPInfoHeader;
        }
      }
    }
  }
  namespace java
  {
    namespace awt
    {
        class Dimension;
    }
  }
  namespace javax
  {
    namespace imageio
    {
        class IIOImage;
        class ImageWriteParam;
      namespace stream
      {
          class ImageInputStream;
          class ImageOutputStream;
      }
    }
  }
}

class gnu::javax::imageio::bmp::BMPInfoHeader : public ::java::lang::Object
{

public:
  BMPInfoHeader(::javax::imageio::stream::ImageInputStream *);
  BMPInfoHeader(::javax::imageio::stream::ImageOutputStream *, ::javax::imageio::IIOImage *, ::javax::imageio::ImageWriteParam *);
private:
  JArray< jbyte > * intToWord(jint);
  JArray< jbyte > * intToDWord(jint);
public:
  virtual void setBitCount(jshort);
  virtual jshort getBitCount();
  virtual void setCompression(jint);
  virtual jint getNumberOfPaletteEntries();
  virtual jint getCompression();
  virtual ::java::awt::Dimension * getSize();
  virtual jint getWidth();
  virtual jint getHeight();
  virtual void setSize(::java::awt::Dimension *);
public: // actually protected
  jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) biSize;
  jint biWidth;
  jint biHeight;
  jshort biPlanes;
  jshort biBitCount;
  jint biCompression;
  jint biSizeImage;
  jint biXPelsPerMeter;
  jint biYPelsPerMeter;
  jint biClrUsed;
  jint biClrImportant;
public:
  static const jint SIZE = 40;
  static const jint BI_RGB = 0;
  static const jint BI_RLE8 = 1;
  static const jint BI_RLE4 = 2;
  static const jint BI_BITFIELDS = 3;
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_imageio_bmp_BMPInfoHeader__
