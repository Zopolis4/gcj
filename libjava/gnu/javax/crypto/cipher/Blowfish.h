
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_crypto_cipher_Blowfish__
#define __gnu_javax_crypto_cipher_Blowfish__

#pragma interface

#include <gnu/javax/crypto/cipher/BaseCipher.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace crypto
      {
        namespace cipher
        {
            class Blowfish;
            class Blowfish$Block;
            class Blowfish$Context;
        }
      }
    }
  }
}

class gnu::javax::crypto::cipher::Blowfish : public ::gnu::javax::crypto::cipher::BaseCipher
{

public:
  Blowfish();
  virtual ::java::lang::Object * clone();
  virtual ::java::util::Iterator * keySizes();
  virtual ::java::util::Iterator * blockSizes();
  virtual ::java::lang::Object * makeKey(JArray< jbyte > *, jint);
  virtual void encrypt(JArray< jbyte > *, jint, JArray< jbyte > *, jint, ::java::lang::Object *, jint);
  virtual void decrypt(JArray< jbyte > *, jint, JArray< jbyte > *, jint, ::java::lang::Object *, jint);
private:
  void blowfishEncrypt(::gnu::javax::crypto::cipher::Blowfish$Block *, ::gnu::javax::crypto::cipher::Blowfish$Context *);
  void blowfishDecrypt(::gnu::javax::crypto::cipher::Blowfish$Block *, ::gnu::javax::crypto::cipher::Blowfish$Context *);
public:
  virtual jboolean selfTest();
private:
  static const jint DEFAULT_BLOCK_SIZE = 8;
  static const jint DEFAULT_KEY_SIZE = 8;
  static const jint MAX_KEY_LENGTH = 56;
  static JArray< jint > * P;
public: // actually package-private
  static JArray< jint > * KS0;
private:
  static JArray< jint > * KS1;
  static JArray< jint > * KS2;
  static JArray< jint > * KS3;
  static ::java::lang::Boolean * valid;
  static JArray< jbyte > * TV_KEY;
  static JArray< jbyte > * TV_CT;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_crypto_cipher_Blowfish__
