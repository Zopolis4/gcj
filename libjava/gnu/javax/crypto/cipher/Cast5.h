
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_crypto_cipher_Cast5__
#define __gnu_javax_crypto_cipher_Cast5__

#pragma interface

#include <gnu/javax/crypto/cipher/BaseCipher.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace crypto
      {
        namespace cipher
        {
            class Cast5;
        }
      }
    }
  }
}

class gnu::javax::crypto::cipher::Cast5 : public ::gnu::javax::crypto::cipher::BaseCipher
{

public:
  Cast5();
private:
  static JArray< jint > * unscramble(jint);
public:
  virtual ::java::lang::Object * clone();
  virtual ::java::util::Iterator * blockSizes();
  virtual ::java::util::Iterator * keySizes();
  virtual ::java::lang::Object * makeKey(JArray< jbyte > *, jint);
  virtual void encrypt(JArray< jbyte > *, jint, JArray< jbyte > *, jint, ::java::lang::Object *, jint);
  virtual void decrypt(JArray< jbyte > *, jint, JArray< jbyte > *, jint, ::java::lang::Object *, jint);
  virtual jboolean selfTest();
private:
  jint f1(jint, jint, jint);
  jint f2(jint, jint, jint);
  jint f3(jint, jint, jint);
  static const jint DEFAULT_BLOCK_SIZE = 8;
  static const jint DEFAULT_KEY_SIZE = 5;
  static JArray< jbyte > * KAT_KEY;
  static JArray< jbyte > * KAT_PT;
  static JArray< jbyte > * KAT_CT;
  static ::java::lang::Boolean * valid;
  static JArray< jint > * S1;
  static JArray< jint > * S2;
  static JArray< jint > * S3;
  static JArray< jint > * S4;
  static JArray< jint > * S5;
  static JArray< jint > * S6;
  static JArray< jint > * S7;
  static JArray< jint > * S8;
  static const jint _12_ROUNDS = 12;
  static const jint _16_ROUNDS = 16;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_crypto_cipher_Cast5__
