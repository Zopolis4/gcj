
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_crypto_cipher_DES__
#define __gnu_javax_crypto_cipher_DES__

#pragma interface

#include <gnu/javax/crypto/cipher/BaseCipher.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace crypto
      {
        namespace cipher
        {
            class DES;
        }
      }
    }
  }
}

class gnu::javax::crypto::cipher::DES : public ::gnu::javax::crypto::cipher::BaseCipher
{

public:
  DES();
  static void adjustParity(JArray< jbyte > *, jint);
  static jboolean isParityAdjusted(JArray< jbyte > *, jint);
  static jboolean isWeak(JArray< jbyte > *);
  static jboolean isSemiWeak(JArray< jbyte > *);
  static jboolean isPossibleWeak(JArray< jbyte > *);
private:
  static void desFunc(JArray< jbyte > *, jint, JArray< jbyte > *, jint, JArray< jint > *);
public:
  virtual ::java::lang::Object * clone();
  virtual ::java::util::Iterator * blockSizes();
  virtual ::java::util::Iterator * keySizes();
  virtual ::java::lang::Object * makeKey(JArray< jbyte > *, jint);
  virtual void encrypt(JArray< jbyte > *, jint, JArray< jbyte > *, jint, ::java::lang::Object *, jint);
  virtual void decrypt(JArray< jbyte > *, jint, JArray< jbyte > *, jint, ::java::lang::Object *, jint);
  static const jint BLOCK_SIZE = 8;
  static const jint KEY_SIZE = 8;
private:
  static JArray< jint > * SP1;
  static JArray< jint > * SP2;
  static JArray< jint > * SP3;
  static JArray< jint > * SP4;
  static JArray< jint > * SP5;
  static JArray< jint > * SP6;
  static JArray< jint > * SP7;
  static JArray< jint > * SP8;
  static JArray< jbyte > * PARITY;
  static JArray< jbyte > * ROTARS;
  static JArray< jbyte > * PC1;
  static JArray< jbyte > * PC2;
public:
  static JArray< JArray< jbyte > * > * WEAK_KEYS;
  static JArray< JArray< jbyte > * > * SEMIWEAK_KEYS;
  static JArray< JArray< jbyte > * > * POSSIBLE_WEAK_KEYS;
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_crypto_cipher_DES__
