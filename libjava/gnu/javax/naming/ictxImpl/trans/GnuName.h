
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_naming_ictxImpl_trans_GnuName__
#define __gnu_javax_naming_ictxImpl_trans_GnuName__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace naming
      {
        namespace ictxImpl
        {
          namespace trans
          {
              class GnuName;
          }
        }
      }
    }
  }
  namespace javax
  {
    namespace naming
    {
        class Name;
    }
  }
}

class gnu::javax::naming::ictxImpl::trans::GnuName : public ::java::lang::Object
{

public: // actually protected
  GnuName();
public:
  GnuName(JArray< ::java::lang::String * > *);
  GnuName(JArray< ::java::lang::String * > *, jint, jint);
  virtual ::javax::naming::Name * add(jint, ::java::lang::String *);
  virtual ::javax::naming::Name * add(::java::lang::String *);
  virtual ::javax::naming::Name * addAll(jint, ::javax::naming::Name *);
  virtual ::javax::naming::Name * addAll(::javax::naming::Name *);
  virtual jint compareTo(::java::lang::Object *);
  virtual jboolean endsWith(::javax::naming::Name *);
  virtual ::java::lang::String * get(jint);
  virtual ::java::util::Enumeration * getAll();
  virtual ::javax::naming::Name * getPrefix(jint);
  virtual ::javax::naming::Name * getSuffix(jint);
  virtual jboolean isEmpty();
  virtual ::java::lang::Object * remove(jint);
  virtual jint size();
  virtual jboolean startsWith(::javax::naming::Name *);
  virtual ::java::lang::Object * clone();
  virtual jboolean equals(::java::lang::Object *);
  virtual jint hashCode();
  virtual ::java::lang::String * toString();
private:
  static const jlong serialVersionUID = -3617482732056931635LL;
public: // actually package-private
  jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) hash;
  JArray< ::java::lang::String * > * content;
  jint from;
  jint length;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_naming_ictxImpl_trans_GnuName__
