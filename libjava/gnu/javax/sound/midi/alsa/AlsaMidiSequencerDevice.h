
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_sound_midi_alsa_AlsaMidiSequencerDevice__
#define __gnu_javax_sound_midi_alsa_AlsaMidiSequencerDevice__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace sound
      {
        namespace midi
        {
          namespace alsa
          {
              class AlsaMidiSequencerDevice;
          }
        }
      }
    }
  }
  namespace javax
  {
    namespace sound
    {
      namespace midi
      {
          class ControllerEventListener;
          class MetaEventListener;
          class MidiDevice$Info;
          class Receiver;
          class Sequence;
          class Sequencer$SyncMode;
          class Track;
          class Transmitter;
      }
    }
  }
}

class gnu::javax::sound::midi::alsa::AlsaMidiSequencerDevice : public ::java::lang::Object
{

  AlsaMidiSequencerDevice();
public:
  static ::gnu::javax::sound::midi::alsa::AlsaMidiSequencerDevice * getInstance();
  virtual void setSequence(::javax::sound::midi::Sequence *);
  virtual void setSequence(::java::io::InputStream *);
  virtual ::javax::sound::midi::Sequence * getSequence();
  virtual void start();
  virtual void stop();
  virtual jboolean isRunning();
  virtual void startRecording();
  virtual void stopRecording();
  virtual jboolean isRecording();
  virtual void recordEnable(::javax::sound::midi::Track *, jint);
  virtual void recordDisable(::javax::sound::midi::Track *);
  virtual jfloat getTempoInBPM();
  virtual void setTempoInBPM(jfloat);
  virtual jfloat getTempoInMPQ();
  virtual void setTempoInMPQ(jfloat);
  virtual void setTempoFactor(jfloat);
  virtual jfloat getTempoFactor();
  virtual jlong getTickLength();
  virtual jlong getTickPosition();
  virtual void setTickPosition(jlong);
  virtual jlong getMicrosecondLength();
  virtual jlong getMicrosecondPosition();
  virtual void setMicrosecondPosition(jlong);
  virtual void setMasterSyncMode(::javax::sound::midi::Sequencer$SyncMode *);
  virtual ::javax::sound::midi::Sequencer$SyncMode * getMasterSyncMode();
  virtual JArray< ::javax::sound::midi::Sequencer$SyncMode * > * getMasterSyncModes();
  virtual void setSlaveSyncMode(::javax::sound::midi::Sequencer$SyncMode *);
  virtual ::javax::sound::midi::Sequencer$SyncMode * getSlaveSyncMode();
  virtual JArray< ::javax::sound::midi::Sequencer$SyncMode * > * getSlaveSyncModes();
  virtual void setTrackMute(jint, jboolean);
  virtual jboolean getTrackMute(jint);
  virtual void setTrackSolo(jint, jboolean);
  virtual jboolean getTrackSolo(jint);
  virtual jboolean addMetaEventListener(::javax::sound::midi::MetaEventListener *);
  virtual void removeMetaEventListener(::javax::sound::midi::MetaEventListener *);
  virtual JArray< jint > * addControllerEventListener(::javax::sound::midi::ControllerEventListener *, JArray< jint > *);
  virtual JArray< jint > * removeControllerEventListener(::javax::sound::midi::ControllerEventListener *, JArray< jint > *);
  virtual ::javax::sound::midi::MidiDevice$Info * getDeviceInfo();
  virtual void open();
private:
  jlong open_();
  void close_(jlong);
public:
  virtual void close();
  virtual jboolean isOpen();
  virtual jint getMaxReceivers();
  virtual jint getMaxTransmitters();
  virtual ::javax::sound::midi::Receiver * getReceiver();
  virtual ::javax::sound::midi::Transmitter * getTransmitter();
  static ::gnu::javax::sound::midi::alsa::AlsaMidiSequencerDevice * instance;
private:
  jlong __attribute__((aligned(__alignof__( ::java::lang::Object)))) nativeState;
  ::javax::sound::midi::Sequence * sequence;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_sound_midi_alsa_AlsaMidiSequencerDevice__
