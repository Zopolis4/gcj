
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_net_ssl_provider_SSLSocketImpl__
#define __gnu_javax_net_ssl_provider_SSLSocketImpl__

#pragma interface

#include <javax/net/ssl/SSLSocket.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace classpath
    {
      namespace debug
      {
          class SystemLogger;
      }
    }
    namespace javax
    {
      namespace net
      {
        namespace ssl
        {
          namespace provider
          {
              class SSLContextImpl;
              class SSLEngineImpl;
              class SSLSocketImpl;
          }
        }
      }
    }
  }
  namespace java
  {
    namespace net
    {
        class InetAddress;
        class Socket;
        class SocketAddress;
    }
    namespace nio
    {
      namespace channels
      {
          class SocketChannel;
      }
    }
  }
  namespace javax
  {
    namespace net
    {
      namespace ssl
      {
          class HandshakeCompletedListener;
          class SSLSession;
      }
    }
  }
}

class gnu::javax::net::ssl::provider::SSLSocketImpl : public ::javax::net::ssl::SSLSocket
{

public:
  SSLSocketImpl(::gnu::javax::net::ssl::provider::SSLContextImpl *, ::java::lang::String *, jint);
  SSLSocketImpl(::gnu::javax::net::ssl::provider::SSLContextImpl *, ::java::lang::String *, jint, ::java::net::Socket *, jboolean);
  virtual void addHandshakeCompletedListener(::javax::net::ssl::HandshakeCompletedListener *);
  virtual jboolean getEnableSessionCreation();
  virtual JArray< ::java::lang::String * > * getEnabledCipherSuites();
  virtual JArray< ::java::lang::String * > * getEnabledProtocols();
  virtual jboolean getNeedClientAuth();
  virtual ::javax::net::ssl::SSLSession * getSession();
  virtual JArray< ::java::lang::String * > * getSupportedCipherSuites();
  virtual JArray< ::java::lang::String * > * getSupportedProtocols();
  virtual jboolean getUseClientMode();
  virtual jboolean getWantClientAuth();
  virtual void removeHandshakeCompletedListener(::javax::net::ssl::HandshakeCompletedListener *);
  virtual void setEnableSessionCreation(jboolean);
  virtual void setEnabledCipherSuites(JArray< ::java::lang::String * > *);
  virtual void setEnabledProtocols(JArray< ::java::lang::String * > *);
  virtual void setNeedClientAuth(jboolean);
  virtual void setUseClientMode(jboolean);
  virtual void setWantClientAuth(jboolean);
  virtual void startHandshake();
public: // actually package-private
  virtual void doHandshake();
public:
  virtual void bind(::java::net::SocketAddress *);
  virtual void connect(::java::net::SocketAddress *);
  virtual void connect(::java::net::SocketAddress *, jint);
  virtual ::java::net::InetAddress * getInetAddress();
  virtual ::java::net::InetAddress * getLocalAddress();
  virtual jint getPort();
  virtual jint getLocalPort();
  virtual ::java::net::SocketAddress * getRemoteSocketAddress();
  virtual ::java::net::SocketAddress * getLocalSocketAddress();
  virtual ::java::nio::channels::SocketChannel * getChannel();
  virtual ::java::io::InputStream * getInputStream();
  virtual ::java::io::OutputStream * getOutputStream();
  virtual void setTcpNoDelay(jboolean);
  virtual jboolean getTcpNoDelay();
  virtual void setSoLinger(jboolean, jint);
  virtual jint getSoLinger();
  virtual void sendUrgentData(jint);
  virtual void setOOBInline(jboolean);
  virtual jboolean getOOBInline();
  virtual void setSoTimeout(jint);
  virtual jint getSoTimeout();
  virtual void setSendBufferSize(jint);
  virtual jint getSendBufferSize();
  virtual void setReceiveBufferSize(jint);
  virtual jint getReceiveBufferSize();
  virtual void setKeepAlive(jboolean);
  virtual jboolean getKeepAlive();
  virtual void setTrafficClass(jint);
  virtual jint getTrafficClass();
  virtual void setReuseAddress(jboolean);
  virtual jboolean getReuseAddress();
  virtual void close();
  virtual void shutdownInput();
  virtual void shutdownOutput();
  virtual jboolean isConnected();
  virtual jboolean isBound();
  virtual jboolean isClosed();
  virtual jboolean isInputShutdown();
  virtual jboolean isOutputShutdown();
public: // actually package-private
  static ::java::net::Socket * access$0(::gnu::javax::net::ssl::provider::SSLSocketImpl *);
  static ::java::io::OutputStream * access$1(::gnu::javax::net::ssl::provider::SSLSocketImpl *);
  static jboolean access$2(::gnu::javax::net::ssl::provider::SSLSocketImpl *);
  static ::gnu::javax::net::ssl::provider::SSLEngineImpl * access$3(::gnu::javax::net::ssl::provider::SSLSocketImpl *);
  static ::java::io::IOException * access$4(::gnu::javax::net::ssl::provider::SSLSocketImpl *);
  static ::java::io::InputStream * access$5(::gnu::javax::net::ssl::provider::SSLSocketImpl *);
  static void access$6(::gnu::javax::net::ssl::provider::SSLSocketImpl *, ::java::io::IOException *);
  static JArray< jint > * $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus();
private:
  static ::gnu::classpath::debug::SystemLogger * logger;
  ::gnu::javax::net::ssl::provider::SSLEngineImpl * __attribute__((aligned(__alignof__( ::javax::net::ssl::SSLSocket)))) engine;
  ::java::util::Set * listeners;
  ::java::net::Socket * underlyingSocket;
  jboolean isHandshaking;
  ::java::io::IOException * handshakeException;
  jboolean initialHandshakeDone;
  jboolean autoClose;
public: // actually package-private
  static jboolean $assertionsDisabled;
private:
  static JArray< jint > * $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus__;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_net_ssl_provider_SSLSocketImpl__
