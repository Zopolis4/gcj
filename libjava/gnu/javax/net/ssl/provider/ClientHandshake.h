
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_javax_net_ssl_provider_ClientHandshake__
#define __gnu_javax_net_ssl_provider_ClientHandshake__

#pragma interface

#include <gnu/javax/net/ssl/provider/AbstractHandshake.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace javax
    {
      namespace net
      {
        namespace ssl
        {
          namespace provider
          {
              class AbstractHandshake$CertVerifier;
              class ClientHandshake;
              class ClientHandshake$CertLoader;
              class ClientHandshake$GenCertVerify;
              class ClientHandshake$ParamsVerifier;
              class ClientHandshake$State;
              class DelegatedTask;
              class MaxFragmentLength;
              class ProtocolVersion;
              class SSLEngineImpl;
              class SessionImpl;
          }
        }
      }
    }
  }
  namespace java
  {
    namespace nio
    {
        class ByteBuffer;
    }
    namespace security
    {
        class KeyPair;
        class PrivateKey;
    }
  }
  namespace javax
  {
    namespace net
    {
      namespace ssl
      {
          class SSLEngineResult$HandshakeStatus;
      }
    }
  }
}

class gnu::javax::net::ssl::provider::ClientHandshake : public ::gnu::javax::net::ssl::provider::AbstractHandshake
{

public:
  ClientHandshake(::gnu::javax::net::ssl::provider::SSLEngineImpl *);
public: // actually protected
  virtual ::javax::net::ssl::SSLEngineResult$HandshakeStatus * implHandleInput();
  virtual ::javax::net::ssl::SSLEngineResult$HandshakeStatus * implHandleOutput(::java::nio::ByteBuffer *);
public: // actually package-private
  virtual ::javax::net::ssl::SSLEngineResult$HandshakeStatus * status();
  virtual void checkKeyExchange();
  virtual void handleV2Hello(::java::nio::ByteBuffer *);
private:
  ::gnu::javax::net::ssl::provider::ProtocolVersion * chooseVersion();
  ::java::util::List * getSuites();
  ::java::util::List * getCompressionMethods();
  jboolean enableExtensions();
  ::gnu::javax::net::ssl::provider::MaxFragmentLength * maxFragmentLength();
  jboolean truncatedHMac();
  ::java::lang::String * getPSKIdentity();
public: // actually package-private
  static ::gnu::javax::net::ssl::provider::ClientHandshake$ParamsVerifier * access$0(::gnu::javax::net::ssl::provider::ClientHandshake *);
  static void access$1(::gnu::javax::net::ssl::provider::ClientHandshake *, ::java::security::KeyPair *);
  static ::java::security::KeyPair * access$2(::gnu::javax::net::ssl::provider::ClientHandshake *);
  static void access$3(::gnu::javax::net::ssl::provider::ClientHandshake *, ::java::lang::String *);
  static ::java::lang::String * access$4(::gnu::javax::net::ssl::provider::ClientHandshake *);
  static void access$5(::gnu::javax::net::ssl::provider::ClientHandshake *, ::java::security::PrivateKey *);
  static ::gnu::javax::net::ssl::provider::AbstractHandshake$CertVerifier * access$6(::gnu::javax::net::ssl::provider::ClientHandshake *);
  static ::gnu::javax::net::ssl::provider::ProtocolVersion * access$7(::gnu::javax::net::ssl::provider::ClientHandshake *);
  static ::java::security::PrivateKey * access$8(::gnu::javax::net::ssl::provider::ClientHandshake *);
  static JArray< jint > * $SWITCH_TABLE$gnu$javax$net$ssl$provider$Extension$Type();
  static JArray< jint > * $SWITCH_TABLE$gnu$javax$net$ssl$provider$ClientHandshake$State();
private:
  ::gnu::javax::net::ssl::provider::ClientHandshake$State * __attribute__((aligned(__alignof__( ::gnu::javax::net::ssl::provider::AbstractHandshake)))) state;
  ::java::nio::ByteBuffer * outBuffer;
  jboolean continuedSession;
  ::gnu::javax::net::ssl::provider::SessionImpl * continued;
  ::java::security::KeyPair * dhPair;
  ::java::lang::String * keyAlias;
  ::java::security::PrivateKey * privateKey;
  ::gnu::javax::net::ssl::provider::MaxFragmentLength * maxFragmentLengthSent;
  jboolean truncatedHMacSent;
  ::gnu::javax::net::ssl::provider::ProtocolVersion * sentVersion;
  ::gnu::javax::net::ssl::provider::AbstractHandshake$CertVerifier * certVerifier;
  ::gnu::javax::net::ssl::provider::ClientHandshake$ParamsVerifier * paramsVerifier;
  ::gnu::javax::net::ssl::provider::DelegatedTask * keyExchange;
  ::gnu::javax::net::ssl::provider::ClientHandshake$CertLoader * certLoader;
  ::gnu::javax::net::ssl::provider::ClientHandshake$GenCertVerify * genCertVerify;
  static JArray< jint > * $SWITCH_TABLE$gnu$javax$net$ssl$provider$Extension$Type__;
  static JArray< jint > * $SWITCH_TABLE$gnu$javax$net$ssl$provider$ClientHandshake$State__;
public: // actually package-private
  static jboolean $assertionsDisabled;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_javax_net_ssl_provider_ClientHandshake__
