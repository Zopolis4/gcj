
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __gnu_java_awt_peer_gtk_GdkGraphicsEnvironment__
#define __gnu_java_awt_peer_gtk_GdkGraphicsEnvironment__

#pragma interface

#include <gnu/java/awt/ClasspathGraphicsEnvironment.h>
#include <gcj/array.h>

extern "Java"
{
  namespace gnu
  {
    namespace classpath
    {
        class Pointer;
    }
    namespace java
    {
      namespace awt
      {
        namespace peer
        {
          namespace gtk
          {
              class GdkGraphicsEnvironment;
              class GdkScreenGraphicsDevice;
              class GtkWindowPeer;
          }
        }
      }
    }
  }
  namespace java
  {
    namespace awt
    {
        class Font;
        class Graphics2D;
        class GraphicsDevice;
      namespace image
      {
          class BufferedImage;
          class ColorModel;
          class SampleModel;
          class WritableRaster;
      }
    }
  }
}

class gnu::java::awt::peer::gtk::GdkGraphicsEnvironment : public ::gnu::java::awt::ClasspathGraphicsEnvironment
{

  static void initIDs();
public:
  GdkGraphicsEnvironment();
public: // actually package-private
  virtual void nativeInitState();
public:
  virtual JArray< ::java::awt::GraphicsDevice * > * getScreenDevices();
private:
  JArray< ::gnu::java::awt::peer::gtk::GdkScreenGraphicsDevice * > * nativeGetScreenDevices();
public:
  virtual ::java::awt::GraphicsDevice * getDefaultScreenDevice();
private:
  ::gnu::java::awt::peer::gtk::GdkScreenGraphicsDevice * nativeGetDefaultScreenDevice();
public:
  virtual ::java::awt::Graphics2D * createGraphics(::java::awt::image::BufferedImage *);
private:
  jint nativeGetNumFontFamilies();
  void nativeGetFontFamilies(JArray< ::java::lang::String * > *);
public:
  virtual JArray< ::java::awt::Font * > * getAllFonts();
  virtual JArray< ::java::lang::String * > * getAvailableFontFamilyNames();
  virtual JArray< ::java::lang::String * > * getAvailableFontFamilyNames(::java::util::Locale *);
public: // actually package-private
  virtual JArray< jint > * getMouseCoordinates();
  virtual jboolean isWindowUnderMouse(::gnu::java::awt::peer::gtk::GtkWindowPeer *);
public:
  virtual ::java::awt::image::WritableRaster * createRaster(::java::awt::image::ColorModel *, ::java::awt::image::SampleModel *);
private:
  jint __attribute__((aligned(__alignof__( ::gnu::java::awt::ClasspathGraphicsEnvironment)))) native_state;
  ::gnu::java::awt::peer::gtk::GdkScreenGraphicsDevice * defaultDevice;
  JArray< ::gnu::java::awt::peer::gtk::GdkScreenGraphicsDevice * > * devices;
  ::gnu::classpath::Pointer * display;
public:
  static ::java::lang::Class class$;
};

#endif // __gnu_java_awt_peer_gtk_GdkGraphicsEnvironment__
