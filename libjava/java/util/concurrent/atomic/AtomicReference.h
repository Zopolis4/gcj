
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_util_concurrent_atomic_AtomicReference__
#define __java_util_concurrent_atomic_AtomicReference__

#pragma interface

#include <java/lang/Object.h>
extern "Java"
{
  namespace sun
  {
    namespace misc
    {
        class Unsafe;
    }
  }
}

class java::util::concurrent::atomic::AtomicReference : public ::java::lang::Object
{

public:
  AtomicReference(::java::lang::Object *);
  AtomicReference();
  virtual ::java::lang::Object * get();
  virtual void set(::java::lang::Object *);
  virtual void lazySet(::java::lang::Object *);
  virtual jboolean compareAndSet(::java::lang::Object *, ::java::lang::Object *);
  virtual jboolean weakCompareAndSet(::java::lang::Object *, ::java::lang::Object *);
  virtual ::java::lang::Object * getAndSet(::java::lang::Object *);
  virtual ::java::lang::String * toString();
private:
  static const jlong serialVersionUID = -1848883965231344442LL;
  static ::sun::misc::Unsafe * unsafe;
  static jlong valueOffset;
  ::java::lang::Object * volatile __attribute__((aligned(__alignof__( ::java::lang::Object)))) value;
public:
  static ::java::lang::Class class$;
};

#endif // __java_util_concurrent_atomic_AtomicReference__
