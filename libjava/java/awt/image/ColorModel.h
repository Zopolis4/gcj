
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __java_awt_image_ColorModel__
#define __java_awt_image_ColorModel__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace awt
    {
      namespace color
      {
          class ColorSpace;
      }
      namespace image
      {
          class ColorModel;
          class Raster;
          class SampleModel;
          class WritableRaster;
      }
    }
  }
}

class java::awt::image::ColorModel : public ::java::lang::Object
{

public: // actually package-private
  static JArray< jint > * nArray(jint, jint);
  static JArray< jbyte > * nArray(jbyte, jint);
public:
  ColorModel(jint);
public: // actually protected
  ColorModel(jint, JArray< jint > *, ::java::awt::color::ColorSpace *, jboolean, jboolean, jint, jint);
public:
  virtual void finalize();
  static ::java::awt::image::ColorModel * getRGBdefault();
  virtual jboolean hasAlpha();
  virtual jboolean isAlphaPremultiplied();
  virtual jint getPixelSize();
  virtual jint getComponentSize(jint);
  virtual JArray< jint > * getComponentSize();
  virtual jint getTransparency();
  virtual jint getNumComponents();
  virtual jint getNumColorComponents();
  virtual jint getRed(jint) = 0;
  virtual jint getGreen(jint) = 0;
  virtual jint getBlue(jint) = 0;
  virtual jint getAlpha(jint) = 0;
  virtual jint getRGB(jint);
public: // actually package-private
  virtual jint getPixelFromArray(::java::lang::Object *);
public:
  virtual jint getRed(::java::lang::Object *);
  virtual jint getGreen(::java::lang::Object *);
  virtual jint getBlue(::java::lang::Object *);
  virtual jint getAlpha(::java::lang::Object *);
  virtual jint getRGB(::java::lang::Object *);
  virtual ::java::lang::Object * getDataElements(jint, ::java::lang::Object *);
  virtual JArray< jint > * getComponents(jint, JArray< jint > *, jint);
  virtual JArray< jint > * getComponents(::java::lang::Object *, JArray< jint > *, jint);
  virtual JArray< jint > * getUnnormalizedComponents(JArray< jfloat > *, jint, JArray< jint > *, jint);
  virtual JArray< jfloat > * getNormalizedComponents(JArray< jint > *, jint, JArray< jfloat > *, jint);
  virtual JArray< jfloat > * getNormalizedComponents(::java::lang::Object *, JArray< jfloat > *, jint);
  virtual jint getDataElement(JArray< jint > *, jint);
  virtual jint getDataElement(JArray< jfloat > *, jint);
  virtual ::java::lang::Object * getDataElements(JArray< jint > *, jint, ::java::lang::Object *);
  virtual ::java::lang::Object * getDataElements(JArray< jfloat > *, jint, ::java::lang::Object *);
  virtual jboolean equals(::java::lang::Object *);
  virtual ::java::awt::color::ColorSpace * getColorSpace();
  virtual ::java::awt::image::ColorModel * coerceData(::java::awt::image::WritableRaster *, jboolean);
public: // actually package-private
  virtual void coerceDataWorker(::java::awt::image::WritableRaster *, jboolean);
public:
  virtual jboolean isCompatibleRaster(::java::awt::image::Raster *);
  virtual ::java::awt::image::WritableRaster * createCompatibleWritableRaster(jint, jint);
  virtual ::java::awt::image::SampleModel * createCompatibleSampleModel(jint, jint);
  virtual jboolean isCompatibleSampleModel(::java::awt::image::SampleModel *);
  virtual jint getTransferType();
  virtual ::java::awt::image::WritableRaster * getAlphaRaster(::java::awt::image::WritableRaster *);
public: // actually package-private
  virtual ::java::lang::String * stringParam();
public:
  virtual ::java::lang::String * toString();
public: // actually protected
  jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) pixel_bits;
  jint transferType;
public: // actually package-private
  JArray< jint > * bits;
  ::java::awt::color::ColorSpace * cspace;
  jint transparency;
  jboolean hasAlpha__;
  jboolean isAlphaPremultiplied__;
private:
  static ::java::awt::image::ColorModel * S_RGB_MODEL;
public:
  static ::java::lang::Class class$;
};

#endif // __java_awt_image_ColorModel__
