
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __javax_imageio_metadata_IIOMetadataFormatImpl__
#define __javax_imageio_metadata_IIOMetadataFormatImpl__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace javax
  {
    namespace imageio
    {
        class ImageTypeSpecifier;
      namespace metadata
      {
          class IIOMetadataFormat;
          class IIOMetadataFormatImpl;
          class IIOMetadataFormatImpl$NodeObject;
          class IIOMetadataNode;
      }
    }
  }
}

class javax::imageio::metadata::IIOMetadataFormatImpl : public ::java::lang::Object
{

public:
  IIOMetadataFormatImpl(::java::lang::String *, jint);
  IIOMetadataFormatImpl(::java::lang::String *, jint, jint);
public: // actually protected
  virtual void addAttribute(::java::lang::String *, ::java::lang::String *, jint, jboolean, ::java::lang::String *);
  virtual void addAttribute(::java::lang::String *, ::java::lang::String *, jint, jboolean, ::java::lang::String *, ::java::util::List *);
  virtual void addAttribute(::java::lang::String *, ::java::lang::String *, jint, jboolean, ::java::lang::String *, ::java::lang::String *, ::java::lang::String *, jboolean, jboolean);
  virtual void addAttribute(::java::lang::String *, ::java::lang::String *, jint, jboolean, jint, jint);
  virtual void addBooleanAttribute(::java::lang::String *, ::java::lang::String *, jboolean, jboolean);
  virtual void addChildElement(::java::lang::String *, ::java::lang::String *);
  virtual void addElement(::java::lang::String *, ::java::lang::String *, jint);
  virtual void addElement(::java::lang::String *, ::java::lang::String *, jint, jint);
private:
  void addNodeObject(::javax::imageio::metadata::IIOMetadataNode *, ::javax::imageio::metadata::IIOMetadataFormatImpl$NodeObject *);
  ::javax::imageio::metadata::IIOMetadataFormatImpl$NodeObject * getNodeObject(::javax::imageio::metadata::IIOMetadataNode *);
  void removeNodeObject(::javax::imageio::metadata::IIOMetadataNode *);
public: // actually protected
  virtual void addObjectValue(::java::lang::String *, ::java::lang::Class *, jboolean, ::java::lang::Object *);
  virtual void addObjectValue(::java::lang::String *, ::java::lang::Class *, jboolean, ::java::lang::Object *, ::java::util::List *);
  virtual void addObjectValue(::java::lang::String *, ::java::lang::Class *, ::java::lang::Object *, ::java::lang::Comparable *, ::java::lang::Comparable *, jboolean, jboolean);
  virtual void addObjectValue(::java::lang::String *, ::java::lang::Class *, jint, jint);
public:
  virtual ::java::lang::String * getRootName();
public: // actually protected
  virtual ::java::lang::String * getResourceBaseName();
public:
  static ::javax::imageio::metadata::IIOMetadataFormat * getStandardFormatInstance();
  virtual jboolean canNodeAppear(::java::lang::String *, ::javax::imageio::ImageTypeSpecifier *) = 0;
public: // actually protected
  virtual void removeAttribute(::java::lang::String *, ::java::lang::String *);
  virtual void removeElement(::java::lang::String *);
  virtual void removeObjectValue(::java::lang::String *);
  virtual void setResourceBaseName(::java::lang::String *);
public:
  virtual jint getAttributeDataType(::java::lang::String *, ::java::lang::String *);
  virtual ::java::lang::String * getAttributeDefaultValue(::java::lang::String *, ::java::lang::String *);
  virtual ::java::lang::String * getAttributeDescription(::java::lang::String *, ::java::lang::String *, ::java::util::Locale *);
  virtual JArray< ::java::lang::String * > * getAttributeEnumerations(::java::lang::String *, ::java::lang::String *);
  virtual jint getAttributeListMaxLength(::java::lang::String *, ::java::lang::String *);
  virtual jint getAttributeListMinLength(::java::lang::String *, ::java::lang::String *);
  virtual ::java::lang::String * getAttributeMaxValue(::java::lang::String *, ::java::lang::String *);
  virtual ::java::lang::String * getAttributeMinValue(::java::lang::String *, ::java::lang::String *);
  virtual JArray< ::java::lang::String * > * getAttributeNames(::java::lang::String *);
  virtual jint getAttributeValueType(::java::lang::String *, ::java::lang::String *);
  virtual JArray< ::java::lang::String * > * getChildNames(::java::lang::String *);
  virtual jint getChildPolicy(::java::lang::String *);
private:
  ::java::lang::String * getDescription(::java::lang::String *, ::java::util::Locale *);
public:
  virtual ::java::lang::String * getElementDescription(::java::lang::String *, ::java::util::Locale *);
  virtual jint getElementMaxChildren(::java::lang::String *);
  virtual jint getElementMinChildren(::java::lang::String *);
  virtual jint getObjectArrayMaxLength(::java::lang::String *);
  virtual jint getObjectArrayMinLength(::java::lang::String *);
  virtual ::java::lang::Class * getObjectClass(::java::lang::String *);
  virtual ::java::lang::Object * getObjectDefaultValue(::java::lang::String *);
  virtual JArray< ::java::lang::Object * > * getObjectEnumerations(::java::lang::String *);
  virtual ::java::lang::Comparable * getObjectMaxValue(::java::lang::String *);
  virtual ::java::lang::Comparable * getObjectMinValue(::java::lang::String *);
  virtual jint getObjectValueType(::java::lang::String *);
  virtual jboolean isAttributeRequired(::java::lang::String *, ::java::lang::String *);
  static ::java::lang::String * standardMetadataFormatName;
private:
  ::java::lang::String * __attribute__((aligned(__alignof__( ::java::lang::Object)))) rootName;
  ::java::util::Map * nodes;
  ::java::util::Map * childPolicies;
  ::java::util::Map * childRanges;
  ::java::lang::String * resourceBaseName;
public:
  static ::java::lang::Class class$;
};

#endif // __javax_imageio_metadata_IIOMetadataFormatImpl__
