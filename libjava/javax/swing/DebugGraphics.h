
// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __javax_swing_DebugGraphics__
#define __javax_swing_DebugGraphics__

#pragma interface

#include <java/awt/Graphics.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace awt
    {
        class Color;
        class Font;
        class FontMetrics;
        class Graphics;
        class Image;
        class Rectangle;
        class Shape;
      namespace image
      {
          class ImageObserver;
      }
    }
    namespace text
    {
        class AttributedCharacterIterator;
    }
  }
  namespace javax
  {
    namespace swing
    {
        class DebugGraphics;
        class JComponent;
    }
  }
}

class javax::swing::DebugGraphics : public ::java::awt::Graphics
{

public:
  DebugGraphics();
  DebugGraphics(::java::awt::Graphics *, ::javax::swing::JComponent *);
  DebugGraphics(::java::awt::Graphics *);
  virtual void setColor(::java::awt::Color *);
  virtual ::java::awt::Graphics * create();
  virtual ::java::awt::Graphics * create(jint, jint, jint, jint);
  static ::java::awt::Color * flashColor();
  static void setFlashColor(::java::awt::Color *);
  static jint flashTime();
  static void setFlashTime(jint);
  static jint flashCount();
  static void setFlashCount(jint);
  static ::java::io::PrintStream * logStream();
  static void setLogStream(::java::io::PrintStream *);
  virtual ::java::awt::Font * getFont();
  virtual void setFont(::java::awt::Font *);
  virtual ::java::awt::Color * getColor();
  virtual ::java::awt::FontMetrics * getFontMetrics();
  virtual ::java::awt::FontMetrics * getFontMetrics(::java::awt::Font *);
  virtual void translate(jint, jint);
  virtual void setPaintMode();
  virtual void setXORMode(::java::awt::Color *);
  virtual ::java::awt::Rectangle * getClipBounds();
  virtual void clipRect(jint, jint, jint, jint);
  virtual void setClip(jint, jint, jint, jint);
  virtual ::java::awt::Shape * getClip();
  virtual void setClip(::java::awt::Shape *);
private:
  void sleep(jint);
public:
  virtual void drawRect(jint, jint, jint, jint);
  virtual void fillRect(jint, jint, jint, jint);
  virtual void clearRect(jint, jint, jint, jint);
  virtual void drawRoundRect(jint, jint, jint, jint, jint, jint);
  virtual void fillRoundRect(jint, jint, jint, jint, jint, jint);
  virtual void drawLine(jint, jint, jint, jint);
  virtual void draw3DRect(jint, jint, jint, jint, jboolean);
  virtual void fill3DRect(jint, jint, jint, jint, jboolean);
  virtual void drawOval(jint, jint, jint, jint);
  virtual void fillOval(jint, jint, jint, jint);
  virtual void drawArc(jint, jint, jint, jint, jint, jint);
  virtual void fillArc(jint, jint, jint, jint, jint, jint);
  virtual void drawPolyline(JArray< jint > *, JArray< jint > *, jint);
  virtual void drawPolygon(JArray< jint > *, JArray< jint > *, jint);
  virtual void fillPolygon(JArray< jint > *, JArray< jint > *, jint);
  virtual void drawString(::java::lang::String *, jint, jint);
  virtual void drawString(::java::text::AttributedCharacterIterator *, jint, jint);
  virtual void drawBytes(JArray< jbyte > *, jint, jint, jint, jint);
  virtual void drawChars(JArray< jchar > *, jint, jint, jint, jint);
  virtual jboolean drawImage(::java::awt::Image *, jint, jint, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage(::java::awt::Image *, jint, jint, jint, jint, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage(::java::awt::Image *, jint, jint, ::java::awt::Color *, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage(::java::awt::Image *, jint, jint, jint, jint, ::java::awt::Color *, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage(::java::awt::Image *, jint, jint, jint, jint, jint, jint, jint, jint, ::java::awt::image::ImageObserver *);
  virtual jboolean drawImage(::java::awt::Image *, jint, jint, jint, jint, jint, jint, jint, jint, ::java::awt::Color *, ::java::awt::image::ImageObserver *);
  virtual void copyArea(jint, jint, jint, jint, jint, jint);
  virtual void dispose();
  virtual jboolean isDrawingBuffer();
  virtual void setDebugOptions(jint);
  virtual jint getDebugOptions();
private:
  ::java::lang::String * prefix();
public:
  static const jint LOG_OPTION = 1;
  static const jint FLASH_OPTION = 2;
  static const jint BUFFERED_OPTION = 4;
  static const jint NONE_OPTION = -1;
public: // actually package-private
  static ::java::awt::Color * debugFlashColor;
  static jint debugFlashCount;
  static jint debugFlashTime;
  static ::java::io::PrintStream * debugLogStream;
  static jint counter;
  ::java::awt::Graphics * __attribute__((aligned(__alignof__( ::java::awt::Graphics)))) graphics;
  ::java::awt::Image * buffer;
  jint debugOptions;
  jint graphicsID;
  jint xOffset;
  jint yOffset;
public:
  static ::java::lang::Class class$;
};

#endif // __javax_swing_DebugGraphics__
